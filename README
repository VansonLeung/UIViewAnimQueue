Still doing this:

UIViewAnimationTransition transition = UIViewAnimationTransitionCurlUp;
UIViewAnimationCurve curve = UIViewAnimationCurveEaseInOut;
[UIView beginAnimations:@"anim" context:NULL];
[UIView setAnimationCurve:curve];
[UIView setAnimationTransition:transition forView:[self view] cache:YES];
[UIView setAnimationDuration:1.0f];
[UIView commitAnimations];

????

Or this:

[UIView animateWithDuration:2 delay: 0 options: 0 animations:
^(void) { [controller setBackgroundColor: [UIColor blueColor]]; }
completion: 

^(BOOL wrwg) {
    [UIView animateWithDuration:2 delay: 2 options: 0 animations:
    ^(void) { [controller setBackgroundColor: [UIColor redColor]]; }
    completion: nil];
}];

????

It's too bulky & non Object-oriented. I hate it very much when I need to do some complex animations in queue.


Therefore I made UIAnimQueue...








I used example code from a tutorial of making cool buttons in http://www.raywenderlich.com/

And implemented my UIViewAnimQueue inside the CoolButton class.

UIViewAnimQueue is a subclass of UIView.

To use this class, you can add this class as a composition of a certain UIView/UIControl.

Then you can use the function inside the subclass listed in UIViewAnimQueue.h


Public Functions:

Firstly you need to init UIViewAnimQueue, and then you need to point it to a target UIView you wish to control, 
by using the function below:
-(void)setupAnimSessionWithTarget:(UIView*)_target;


The following 2 functions push animation parameters.
Upon pushing, animation should sequentially run one by one.
Custom Rect size:
-(void)pushWithRect:(CGRect)rect delay:(CGFloat)delay duration:(CGFloat)duration curve:(UIViewAnimationCurve)curve;
Return to its original size:
-(void)pushWithDefaultWithDelay:(CGFloat)delay duration:(CGFloat)duration curve:(UIViewAnimationCurve)curve;


Public functions somehow obsolote/buggy below:
-(void)startAnim;


Pause the animation by running the function below:
-(void)stopAnim;


Useful functions below:


You can forcibly pop & run the next animation while overriding currently running animation.
-(void)forcePop;


You can terminate the animation by cleaning the queue.
-(void)cleanQueue;


You can clean the queue while resetting UIView's position at the same time by running the following:
-(void)resetDefault;



Example usage:
Please see "VanButton.h" & "VanButton.m"




Van